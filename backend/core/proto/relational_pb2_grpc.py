# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from core.proto import relational_pb2 as relational__pb2


class RelationalServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Store = channel.unary_unary(
                '/relational.RelationalService/Store',
                request_serializer=relational__pb2.StoreRequest.SerializeToString,
                response_deserializer=relational__pb2.StoreResponse.FromString,
                )
        self.ReconstructNorm = channel.unary_unary(
                '/relational.RelationalService/ReconstructNorm',
                request_serializer=relational__pb2.ReconstructNormRequest.SerializeToString,
                response_deserializer=relational__pb2.ReconstructNormResponse.FromString,
                )
        self.ReconstructNormById = channel.unary_unary(
                '/relational.RelationalService/ReconstructNormById',
                request_serializer=relational__pb2.ReconstructNormByIdRequest.SerializeToString,
                response_deserializer=relational__pb2.ReconstructNormResponse.FromString,
                )
        self.GetBatch = channel.unary_unary(
                '/relational.RelationalService/GetBatch',
                request_serializer=relational__pb2.GetBatchRequest.SerializeToString,
                response_deserializer=relational__pb2.GetBatchResponse.FromString,
                )


class RelationalServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Store(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReconstructNorm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReconstructNormById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RelationalServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Store': grpc.unary_unary_rpc_method_handler(
                    servicer.Store,
                    request_deserializer=relational__pb2.StoreRequest.FromString,
                    response_serializer=relational__pb2.StoreResponse.SerializeToString,
            ),
            'ReconstructNorm': grpc.unary_unary_rpc_method_handler(
                    servicer.ReconstructNorm,
                    request_deserializer=relational__pb2.ReconstructNormRequest.FromString,
                    response_serializer=relational__pb2.ReconstructNormResponse.SerializeToString,
            ),
            'ReconstructNormById': grpc.unary_unary_rpc_method_handler(
                    servicer.ReconstructNormById,
                    request_deserializer=relational__pb2.ReconstructNormByIdRequest.FromString,
                    response_serializer=relational__pb2.ReconstructNormResponse.SerializeToString,
            ),
            'GetBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBatch,
                    request_deserializer=relational__pb2.GetBatchRequest.FromString,
                    response_serializer=relational__pb2.GetBatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'relational.RelationalService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RelationalService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Store(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/relational.RelationalService/Store',
            relational__pb2.StoreRequest.SerializeToString,
            relational__pb2.StoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReconstructNorm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/relational.RelationalService/ReconstructNorm',
            relational__pb2.ReconstructNormRequest.SerializeToString,
            relational__pb2.ReconstructNormResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReconstructNormById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/relational.RelationalService/ReconstructNormById',
            relational__pb2.ReconstructNormByIdRequest.SerializeToString,
            relational__pb2.ReconstructNormResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/relational.RelationalService/GetBatch',
            relational__pb2.GetBatchRequest.SerializeToString,
            relational__pb2.GetBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
